
<div class="container mt-5">   
    <button style=" background-color: #d1ae6d;color:aliceblue" class="btn-add-to-cart btn mb-4"><a style="color: #ffffff;" href="/book/create">Add Product</a></button>
    <button type="button" onclick="restoreDb()" style=" background-color: #d1ae6d;color:aliceblue" class="btn-add-to-cart btn mb-4"><a style="color: #ffffff;">Restore</a></button>

    <div class="row">
        <div class="col-md-3">
            <div class="card category-bg">
                <div class="card-body">
                    <h1 class="roboto-font-size-18 text-center"  style="color: #000000;">Category</h1>
                    <hr class="black-hr">
                    {{#each catgories}}
                    <a onclick="categoryType('{{name}}')" class="list-item roboto-font-size-18 pointer"  style="color: #000000;">{{name}}</a><br>
                    {{/each}}
                </div>
            </div>
        </div>
        <div class="col-md-9 d-flex">
            <div class="container">
                <div class="row mb-4" id="bookListContainer">
                    {{#each books}}
                    <div class="col-4 mb-4">
                        <div class="card h-100" style="width: 14rem; margin-right: 12px;">
                            <div class="container"
                                style="width: 100%; height: 200px; background-color: #f5f5f5; align-items: center; justify-content: center;">
                                <a  href="/book/{{id}}/viewAdmin">
                                <img src="/{{image}}" class="card-img-top" alt="{{name}}"
                                    style="width: 100%; height: 100%; object-fit: contain;">
                                </a>
                            </div>
                            <div class="card-body d-flex flex-column">
                                <h6 class="card-title"><a style="color: #000000;" href="/book/{{id}}/viewAdmin">{{name}}</a></h6>
                                <div class="d-flex justify-content-between mt-auto">
                                     <button style="background-color: #53a3c0;color:aliceblue" class="btn-add-to-cart btn "><a style="color: #ffffff;" href="/book/{{id}}/edit">Edit</a></button>
                                     <button style="background-color: #ba3838;color:aliceblue" onclick="openDeleteModal('{{id}}')" class="btn-add-to-cart btn">Delete</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    {{/each}}
                </div>
                <nav aria-label="Page navigation example">
                    <ul class="pagination justify-content-center">
                        <li class="page-item">
                            <a class="page-link custom-pagination-background custom-page-number" href="javascript:void(0);" onclick="categoryType('{{cateName}}', '{{subtractOne currentPage}}')">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                        {{#each (range 1 4)}}
                        <li class="page-item">
                            <a class="page-link custom-pagination-background custom-page-number"
                                href="javascript:void(0);" onclick="categoryType('{{cateName}}', {{this}})">
                                {{this}}
                            </a>
                        </li>
                        {{/each}}
                        <a class="custom-pagination-background custom-page-number"> <span class="mr-2 ml-2" style="color: #000000;">... </span></a>   
                        <li class="page-item">
                            <a class="page-link custom-pagination-background custom-page-number"
                                href="javascript:void(0);" onclick="categoryType('{{cateName}}', {{totalPages}})">
                                {{totalPages}}
                            </a>
                        </li>      
                        <li class="page-item">
                            <a class="page-link custom-pagination-background custom-page-number" href="javascript:void(0);" onclick="categoryType('{{cateName}}', '{{addinOne currentPage totalPages}}')">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div id="delete-course-modal" class="modal" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Modal title</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <p>Bạn chắc chắn muốn xóa sản phẩm này?</p>
      </div>
      <div class="modal-footer">
        <button id="btn-delete-course" type="button" class="btn btn-danger">Xóa bỏ</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Hủy</button>
      </div>
    </div>
  </div>
</div>

<form method="POST" name="delete-form"></form>
<form method="POST" action="/admin/restore" name="restore-form"></form>

<script>
    function restoreDb(){
        var restoreForm=document.forms['restore-form'];
        restoreForm.submit();
    }
    var productIdToDelete;
    var deleteForm=document.forms['delete-form'];
    function openDeleteModal(productId) {
        $('#delete-course-modal').modal('show');
        // Set the productId to use when confirming deletion
        productIdToDelete = productId;
    }

    const cancelButton = document.querySelector('.modal .modal-footer .btn-secondary');
    cancelButton.addEventListener('click', function(event) {
       event.preventDefault();
      $('#delete-course-modal').modal('hide');
    })
    const closeButton = document.querySelector('.close');
    closeButton.addEventListener('click', function(event) {
       event.preventDefault();
      $('#delete-course-modal').modal('hide');
    });


    function categoryType(name, page = 1) {
        const url = `/admin/ajax/${name}/page=${page}`;
        fetch(url)
            .then(response => response.json())
            .then(data => {
                // Xử lý dữ liệu trả về, ví dụ cập nhật danh sách sách trên trang
                updateBookList(data.books);

                // Cập nhật phân trang
                updatePagination(data.totalPages, name, page);
                
                

                // Cập nhật đường dẫn mà không load lại trang
                {{!-- const newUrl = `/admin/showProducts/${name}/page=${page}`;
                history.pushState({ page: page, name: name }, '', url); --}}
            })
            .catch(error => console.error('Error:', error));
    }

    function updateBookList(books) {
        const bookListContainer = document.getElementById('bookListContainer');

        // Xóa tất cả các phần tử con trong container
        while (bookListContainer.firstChild) {
            bookListContainer.removeChild(bookListContainer.firstChild);
        }

        // Thêm sách mới vào container
        books.forEach(book => {
            const card = document.createElement('div');
            card.className = 'col-4 mb-4';
            card.innerHTML = `
                <div class="card h-100" style="width: 14rem; margin-right: 12px;">
                    <div class="container" style="width: 100%; height: 200px; background-color: #f5f5f5; align-items: center; justify-content: center;">
                        <a href="/book/${book.id}/viewAdmin">
                        <img src="/${book.image}" class="card-img-top" alt="${book.name}" style="width: 100%; height: 100%; object-fit: contain;">
                        </a>
                    </div>
                    <div class="card-body d-flex flex-column">
                        <h6 class="card-title"><a style="color: #000000;" href="/book/${book.id}/viewAdmin">${book.name}</a></h6>
                        <div class="d-flex justify-content-between mt-auto">
                            <button style="background-color: #53a3c0;color:aliceblue" class="btn-add-to-cart btn "><a style="color: #000000;" href="/book/${book.id}/edit">Edit</a></button>
                            <button style="background-color: #ba3838;color:aliceblue" onclick="openDeleteModal('${book.id}')" class="btn-add-to-cart btn">Delete</button>
                        </div>
                    </div>
                </div>
            `;
            bookListContainer.appendChild(card);
        });
    }

    function updatePagination(totalPages, cateName, currentPage) {
        
        const paginationContainer = document.querySelector('.pagination');
        const pageNumbers = generatePageNumbers(currentPage, totalPages);

        // Xóa tất cả các phần tử con trong container
        while (paginationContainer.firstChild) {
            paginationContainer.removeChild(paginationContainer.firstChild);
        }

        // Thêm nút "Previous"
        const prevLi = document.createElement('li');
        prevLi.className = 'page-item';
        const prevLink = document.createElement('a');
        prevLink.className = 'page-link custom-pagination-background custom-page-number';
        prevLink.href = `javascript:void(0);`;
        prevLink.textContent = '«';
        const prePage = subtractOne(currentPage)
        prevLink.onclick = () => categoryType(cateName, prePage);
        prevLi.appendChild(prevLink);
        paginationContainer.appendChild(prevLi);

        // Thêm các nút phân trang mới vào container
        for (let i = 0; i < pageNumbers.length; i++) {
            if (pageNumbers[i] === 0){
                const li = document.createElement('a');
                li.className = 'custom-pagination-background custom-page-number';
                
                const link = document.createElement('span');
                link.className = 'mr-2 ml-2';
                link.textContent = '...';
                link.style.color = 'black';

                li.appendChild(link);
                paginationContainer.appendChild(li);
            } else {
                const li = document.createElement('li');
                li.className = 'page-item';

                const link = document.createElement('a');
                link.className = 'page-link custom-pagination-background custom-page-number';
                link.href = `javascript:void(0);`;
                link.textContent = pageNumbers[i];
                link.onclick = () => categoryType(cateName, pageNumbers[i]);

                li.appendChild(link);
                paginationContainer.appendChild(li);
            }
        }

        // Thêm nút "Next"
        const nextLi = document.createElement('li');
        nextLi.className = 'page-item';
        const nextLink = document.createElement('a');
        nextLink.className = 'page-link custom-pagination-background custom-page-number';
        nextLink.href = `javascript:void(0);`;
        nextLink.textContent = '»';
        nextLink.onclick = () => categoryType(cateName, addinOne(currentPage, totalPages));
        nextLi.appendChild(nextLink);
        paginationContainer.appendChild(nextLi);
    }

    function generatePageNumbers(currentPage, totalPages) {
        const pageNumbers = [];
        if (totalPages <= 5){
            for (let i = 1; i <= totalPages; i++) {
                pageNumbers.push(i);
            }
        } else {
            if (currentPage <= 3){
                for (let i = 1; i <= 4; i++) {
                    pageNumbers.push(i);
                }
                pageNumbers.push(0);
                pageNumbers.push(totalPages);
            } else if (currentPage >= totalPages - 2) {
                pageNumbers.push(1);
                pageNumbers.push(0);
                for (let i = totalPages - 3; i <= totalPages; i++) {
                    pageNumbers.push(i);
                }
            } else {
                pageNumbers.push(1);
                pageNumbers.push(0);
                for (let i = currentPage - 1; i <= currentPage + 1; i++) {
                    pageNumbers.push(i);
                }
                pageNumbers.push(0);
                pageNumbers.push(totalPages);
            }
        }
        return pageNumbers;
    }

    document.addEventListener('DOMContentLoaded', function() {
        var btnDeleteCourse=document.getElementById("btn-delete-course");
        btnDeleteCourse.onclick=function(){
         deleteForm.action='/book/'+productIdToDelete+'?_method=DELETE'; 
         deleteForm.submit();
        } 

        const currentPage = '{{currentPage}}';
        const totalPages = '{{totalPages}}';
        
        document.querySelectorAll('.page-link').forEach(link => {
            link.addEventListener('click', function(event) {
                event.preventDefault();
                const page = this.textContent.trim();
                categoryType('{{cateName}}', page);
            });
        });

        // Thêm xử lý sự kiện cho nút "Previous"
        const prevButton = document.querySelector('.pagination .page-item:first-child .page-link');
        prevButton.addEventListener('click', function(event) {
            event.preventDefault();
            categoryType('{{cateName}}', subtractOne('{{currentPage}}'));
        });

        // Thêm xử lý sự kiện cho nút "Next"
        const nextButton = document.querySelector('.pagination .page-item:last-child .page-link');
        nextButton.addEventListener('click', function(event) {
            event.preventDefault();
            categoryType('{{cateName}}', addinOne(currentPage, totalPages));
        }); 
    });

    function subtractOne(currentPage) {
        if(currentPage === 1){
            return currentPage;
        }
        return currentPage - 1;
    }

    function addinOne(currentPage, totalPages) {
        if(currentPage === totalPages){
            return currentPage;
        }
        return currentPage + 1;
    }   

</script>
